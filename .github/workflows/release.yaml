name: Build & Package (Windows, macOS, Linux)

on:
    workflow_dispatch: # manual run from Actions tab

env:
    BIN_NAME: obamify

jobs:
    build:
        name: Build ${{ matrix.os_tag }}
        runs-on: ${{ matrix.runner }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - runner: ubuntu-latest
                      os_tag: linux
                      target: x86_64-unknown-linux-gnu
                      ext: ""
                      zip_cmd: zip -r
                    - runner: macos-14
                      os_tag: macos
                      target: aarch64-apple-darwin
                      ext: ""
                      zip_cmd: zip -r
                    - runner: windows-latest
                      os_tag: windows
                      target: x86_64-pc-windows-msvc
                      ext: ".exe"

        steps:
            - uses: actions/checkout@v4

            - uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            # Works on all OSes (default shell is bash on Linux/macOS, pwsh on Windows)
            - name: Cargo build (release)
              run: cargo build --release --target ${{ matrix.target }}

            # ---- Package on Linux/macOS (bash) ----
            - name: Package (Unix)
              if: ${{ !startsWith(matrix.runner, 'windows') }}
              run: |
                  set -euo pipefail
                  APP="${{ env.BIN_NAME }}"
                  PKG="dist/${APP}-${{ matrix.os_tag }}"
                  BIN="target/${{ matrix.target }}/release/${APP}${{ matrix.ext }}"
                  test -f "$BIN" || (echo "Missing $BIN" && exit 1)

                  mkdir -p "$PKG"
                  cp "$BIN" "$PKG/"

                  test -d presets || (echo "./presets missing" && exit 1)
                  cp -R presets "$PKG/"

                  test -f target.png || (echo "./target.png missing" && exit 1)
                  test -f weights.png || (echo "./weights.png missing" && exit 1)
                  test -f blank.png || (echo "./weights.png missing" && exit 1)
                  cp target.png weights.png blank.png "$PKG/"

                  (cd dist && ${{ matrix.zip_cmd }} "${APP}-${{ matrix.os_tag }}.zip" "${APP}-${{ matrix.os_tag }}")

            # ---- Package on Windows (PowerShell) ----
            - name: Package (Windows)
              if: startsWith(matrix.runner, 'windows')
              shell: pwsh
              run: |
                  $ErrorActionPreference = "Stop"
                  $App = "${{ env.BIN_NAME }}"
                  $Pkg = "dist/$App-${{ matrix.os_tag }}"
                  $Bin = "target/${{ matrix.target }}/release/$App${{ matrix.ext }}"

                  if (-not (Test-Path $Bin)) { throw "Missing $Bin" }
                  New-Item -ItemType Directory -Force -Path $Pkg | Out-Null
                  Copy-Item $Bin -Destination $Pkg -Force

                  if (-not (Test-Path "presets")) { throw "./presets missing" }
                  Copy-Item -Recurse -Force "presets" $Pkg

                  if (-not (Test-Path "target.png")) { throw "./target.png missing" }
                  if (-not (Test-Path "weights.png")) { throw "./weights.png missing" }
                  if (-not (Test-Path "blank.png")) { throw "./blank.png missing" }
                  Copy-Item "target.png","weights.png","blank.png" -Destination $Pkg -Force

                  Compress-Archive -Path "$Pkg/*" -DestinationPath "dist/$App-${{ matrix.os_tag }}.zip" -Force

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ env.BIN_NAME }}-${{ matrix.os_tag }}
                  path: dist/*.zip
